// Code generated by MockGen. DO NOT EDIT.
// Source: internal/users/usecase/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/DoWithLogic/go-echo-realworld/internal/users/dtos"
	middleware "github.com/DoWithLogic/go-echo-realworld/pkg/middleware"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, request dtos.UserData) (dtos.UserData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(dtos.UserData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, request)
}

// Detail mocks base method.
func (m *MockUsecase) Detail(ctx context.Context, id int64) (dtos.UserData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(dtos.UserData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Detail indicates an expected call of Detail.
func (mr *MockUsecaseMockRecorder) Detail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockUsecase)(nil).Detail), ctx, id)
}

// FollowUser mocks base method.
func (m *MockUsecase) FollowUser(ctx context.Context, req dtos.ProfileRequest) (dtos.ProfileData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", ctx, req)
	ret0, _ := ret[0].(dtos.ProfileData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUsecaseMockRecorder) FollowUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUsecase)(nil).FollowUser), ctx, req)
}

// Login mocks base method.
func (m *MockUsecase) Login(ctx context.Context, request dtos.UserData) (dtos.UserData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(dtos.UserData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseMockRecorder) Login(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecase)(nil).Login), ctx, request)
}

// ProfileDetail mocks base method.
func (m *MockUsecase) ProfileDetail(ctx context.Context, req dtos.ProfileRequest) (dtos.ProfileData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileDetail", ctx, req)
	ret0, _ := ret[0].(dtos.ProfileData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProfileDetail indicates an expected call of ProfileDetail.
func (mr *MockUsecaseMockRecorder) ProfileDetail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileDetail", reflect.TypeOf((*MockUsecase)(nil).ProfileDetail), ctx, req)
}

// Update mocks base method.
func (m *MockUsecase) Update(ctx context.Context, request dtos.UserData, identity middleware.CustomClaims) (dtos.UserData, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request, identity)
	ret0, _ := ret[0].(dtos.UserData)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(ctx, request, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), ctx, request, identity)
}
